@using Model.Enum
@model IEnumerable<Model.IStorableObject>

<script src="~/js/storableObjectScripts.js"></script>

@{
    ViewBag.Filtration = true;

    IEnumerable<Model.Permission> currentPermissions = (IEnumerable<Model.Permission>)ViewBag.PermissionList;
    ViewBag.EquipmentEdit = currentPermissions.Any(x => x.PermissionType == PermissionType.EquipmentEdit);
    ViewBag.MaterialEdit = currentPermissions.Any(x => x.PermissionType == PermissionType.MaterialsEdit);
    
}

@await Html.PartialAsync("StorableObjectsTables", Model)

@if(ViewBag.LocationId != -1)
{
    <div id="customMenu" class="border text-nowrap" style="display:none; position:absolute; z-index:1000;">
        <ul class="list-group dropdown-menu">
            @foreach (Model.Permission prm in ViewBag.PermissionList)
            {
                switch (prm.PermissionType)
                {
                    case PermissionType.EquipmentAdd:
                        <li class="list-group-item p-0">
                            <a class="btn btn-success  my-1"
                               asp-controller="StorableObject"
                               asp-action="AddEquipment"
                               asp-route-locationId="@ViewBag.LocationId">
                                Оборудование Добавить
                            </a>
                        </li>
                        break;
                    case PermissionType.MaterialsAdd:
                        <li class="list-group-item p-0">
                            <a class="btn btn-success  my-1"
                               asp-controller="StorableObject"
                               asp-action="AddMaterial"
                               asp-route-locationId="@ViewBag.LocationId">
                                Материал Добавить
                            </a>
                        </li>
                        break;
                    case PermissionType.MaterialsEdit:
                        <li class="list-group-item p-0">
                            <button class="btn btn-warning  my-1"
                                    type="button"
                                    onclick="submitReservationRequest(getSelectedCheckboxValues(document.querySelector('table#materialTable')),@(ViewBag.LocationId))">
                                Материал Зарезервировать
                            </button>
                        </li>
                        <li class="list-group-item p-0">
                            <button class="btn btn-danger  my-1"
                                    type="button"
                                    onclick="submitDecomissionRequest(getSelectedCheckboxValues(document.querySelector('table#materialTable')),@(ViewBag.LocationId))">
                                Материал Реализовать\Списать
                            </button>
                        </li>
                        break;
                    case PermissionType.EquipmentEdit:
                        <li class="list-group-item p-0">
                            <button class="btn btn-warning  my-1"
                                    type="button"
                                    onclick="submitReservationRequest(getSelectedCheckboxValues(document.querySelector('table#equipmentTable')),@(ViewBag.LocationId))">
                                Оборудование Зарезервировать
                            </button>
                        </li>
                        <li class="list-group-item p-0">
                            <button class="btn btn-danger  my-1"
                                    type="button"
                                    onclick="submitDecomissionRequest(getSelectedCheckboxValues(document.querySelector('table#equipmentTable')),@(ViewBag.LocationId))">
                                Оборудование Реализовать\Списать
                            </button>
                        </li>
                        break;
                    case PermissionType.DeliveryAccess:
                        <li class="list-group-item p-0">
                            <button class="btn btn-primary  my-1"
                                    type="button"
                                    onclick="submitDeliveryRequest(getSelectedCheckboxValues(document.querySelector('div#storableObjectsContainer')),@(ViewBag.LocationId))">
                                Доставка Создать
                            </button>
                        </li>
                        break;
                }
            }
        </ul>
    </div>
}

<script>
    //Кастомное поведение при клике ПКМ
    const customMenu = document.getElementById('customMenu');

    document.addEventListener('contextmenu', function (event) {
        event.preventDefault(); // Отключаем стандартное меню
        customMenu.style.display = 'block';
        customMenu.style.left = `${event.pageX}px`;
        customMenu.style.top = `${event.pageY}px`;
    });

    document.addEventListener('click', function () {
        customMenu.style.display = 'none';
    });
</script>

<script>
    addHandler(function (newEventString) {
        if (newEventJSON.EventType != 6){
            return;
        }
        @if (ViewBag.LocationId != -1)
        {
            <text>
            if(newEventJSON.LocationId != @(ViewBag.LocationId)) {
                return;
            }
            </text>
        }
        try {
            newEventJSON.ObjectsInEvent.forEach(storableObject => {
                let canChange = false;
                let tableId = "";
                if (storableObject.StorableObjectType === 1) {
                    canChange = @(ViewBag.EquipmentEdit ? "true" : "false");
                    tableId = "equipmentTable";
                };
                if (storableObject.StorableObjectType === 2) {
                    canChange = @(ViewBag.MaterialEdit ? "true" : "false");
                    tableId = "materialTable";
                };

                const tableBody = document.getElementById(tableId).getElementsByTagName('tbody')[0];
                tableBody.appendChild(buildRowForStorableObject(storableObject, canChange,new Date(newEventJSON.DateTime)));

            });
        } catch (error) {
            console.error("Error processing event:", error);
        }
    });
</script>