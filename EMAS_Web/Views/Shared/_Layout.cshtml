@using Model

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - EMAS_Web</title>

    @* Bootstrap *@
    <link rel="stylesheet" href="~/lib/bootstrap-5.3.3-dist/css/bootstrap.min.css" asp-append-version="true" />
    <script src="~/lib/bootstrap-5.3.3-dist/js/bootstrap.bundle.min.js" asp-append-version="true"></script>

    @* SignalR *@
    <script src="~/lib/microsoft-signalr/signalr.min.js"></script>

    <script src="~/js/timeSpan.min.js"></script>
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <script src="~/lib/jquery/dist/jquery.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <link rel="stylesheet" href="~/EMAS_Web.styles.css" asp-append-version="true" />
    <script src="~/js/coockieManager.js"></script>
    @* Обработчик событий *@
    @if (Context.Session.GetString("UserFullname") != null)
    {
        <script type="text/javascript">
            const hubConnection = new signalR.HubConnectionBuilder().withUrl("/events").build();

            let newEventJSON = null;
            const eventHandlers = [];

            function addHandler(handler) {
                eventHandlers.push(handler);
            }

            addHandler(function (newEventString) {
                newEventJSON = JSON.parse(newEventString);
                try {
                    console.log('Received event:', newEventJSON);
                    addEventToast(newEventJSON);
                } catch (error) {
                    console.error("Error processing event:", error);
                }
            });

        </script>
    }
</head>

<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container-fluid">
                <a class="navbar-brand" asp-controller="Home" asp-action="Index">EMAS_Web</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                
                @if (Context.Session.GetString("UserFullname") != null)
                {
                    @await Component.InvokeAsync("LocationsComponent")

                    @if (Context.Session.GetInt32("Admin") == 1)
                    {
                        <div class="dropdown-center d-inline">
                            <button class="btn btn-outline-secondary p-0 " type="button" data-bs-toggle="dropdown" data-bs-target="#adminlist" aria-expanded="false">
                                ⚙
                            </button>
                            <ul class="dropdown-menu" id="adminlist">
                                <li><a class="dropdown-item" asp-controller="Admin" asp-action="EmployeeTable">Сотрудники</a></li>
                                <li><a class="dropdown-item" asp-controller="Admin" asp-action="EquipmentStatusEditor">Статусы Оборудования</a></li>
                            </ul>
                        </div>
                    }

                    <div class="nav-item d-inline">
                        <span class="nav-link d-inline">@Context.Session.GetString("UserFullname")</span>
                    </div>
                }
            </div>
        </nav>
    </header>
    <div class="container-fluid">
        <main role="main" class="px-1">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2024 - EMAS_Web - <a asp-controller="Home" asp-action="Privacy">Privacy</a>
        </div>
    </footer>

    @await RenderSectionAsync("Scripts", required: false)

    <script type="text/javascript">
        // Выводим Alert если такой имеется
        @if (TempData["AlertMessage"] != null)
        {
            <text>
            alert('@Html.Raw(TempData["AlertMessage"])');
            </text>
        }
    </script>

    <script type="text/javascript">


        hubConnection.on("ReceiveNewEvent", function (newEventString) {
            eventHandlers.forEach(handler => handler(newEventString));
        });

        hubConnection.onclose(function () {
                console.log('Connection closed. Attempting to reconnect...');
                setTimeout(function () {
                    startConnection();
                }, 5000);
            });

        hubConnection.start()
            .catch(function (err) {
                return console.error(err.toString());
            });

    </script>

    <div class="toast-container position-static position-fixed bottom-0 end-0">
        
    </div>
</body>
</html>
