@model IEnumerable<Model.Equipment>
@using Service.Connection



@if (ViewBag.Filtration == true)
{
	<div class="fs-3 m-3">
		Количество найденных позиций = <span id="equipmentTable_visibleRowsCount" class="fs-3"></span>
	</div>
	<script>
		const equipmentTableFilter = new TableFilter("equipmentTable");
	</script>
}

<table id="equipmentTable" class="table table-striped table-bordered">
	<thead>
        <tr>
            <th>
                <input class="form-check-input" type="checkbox" id="checkAll" onchange="setCheckAllVisibleChildElements(document.querySelector('table#equipmentTable'), this.checked)">
            </th>

            <th>
                Id<div class="resizer"></div>
                @if (ViewBag.Filtration == true)
                {
                    TableFilterViewModelBuilder _filterBuilder = new("equipmentTable", "equipmentTableFilter", 1, "Id");
                    _filterBuilder.Filtering(Model.Select(e => e.Id.ToString()).Distinct()).NumericRange().Sortable();
                    @await Component.InvokeAsync("TableFilterMenu", _filterBuilder.Build())
                }
            </th>

            <th>
                Тип<div class="resizer"></div>
                @if (ViewBag.Filtration == true)
                {
                    TableFilterViewModelBuilder _filterBuilder = new("equipmentTable", "equipmentTableFilter", 2, "Тип");
                    _filterBuilder.Filtering(Model.Select(e => e.Type).Distinct()).Sortable();
                    @await Component.InvokeAsync("TableFilterMenu", _filterBuilder.Build())
                }
            </th>

            <th>
                Марка<div class="resizer"></div>
                @if (ViewBag.Filtration == true)
                {
                    TableFilterViewModelBuilder _filterBuilder = new("equipmentTable", "equipmentTableFilter", 3, "Марка");
                    _filterBuilder.Filtering(Model.Select(e => e.Name).Distinct()).Sortable();
                    @await Component.InvokeAsync("TableFilterMenu", _filterBuilder.Build())
                }
            </th>

            <th>
                Производитель<div class="resizer"></div>
                @if (ViewBag.Filtration == true)
                {
                    TableFilterViewModelBuilder _filterBuilder = new("equipmentTable", "equipmentTableFilter", 4, "Производитель");
                    _filterBuilder.Filtering(Model.Select(e => e.Manufacturer).Distinct()).Sortable();
                    @await Component.InvokeAsync("TableFilterMenu", _filterBuilder.Build())
                }
            </th>

            <th>
                Единицы Измерения<div class="resizer"></div>
                @if (ViewBag.Filtration == true)
                {
                    TableFilterViewModelBuilder _filterBuilder = new("equipmentTable", "equipmentTableFilter", 5, "Единицы Измерения");
                    _filterBuilder.Filtering(Model.Select(e => e.Units).Distinct()).Sortable();
                    @await Component.InvokeAsync("TableFilterMenu", _filterBuilder.Build())
                }
            </th>

            <th>
                Предел<div class="resizer"></div>
                @if (ViewBag.Filtration == true)
                {
                    TableFilterViewModelBuilder _filterBuilder = new("equipmentTable", "equipmentTableFilter", 6, "Предел");
                    _filterBuilder.Filtering(Model.Select(e => e.Limit).Distinct()).Sortable();
                    @await Component.InvokeAsync("TableFilterMenu", _filterBuilder.Build())
                }
            </th>

            <th>
                Класс Точности<div class="resizer"></div>
                @if (ViewBag.Filtration == true)
                {
                    TableFilterViewModelBuilder _filterBuilder = new("equipmentTable", "equipmentTableFilter", 7, "Класс Точности");
                    _filterBuilder.Filtering(Model.Select(e => e.AccuracyClass).Distinct()).Sortable();
                    @await Component.InvokeAsync("TableFilterMenu", _filterBuilder.Build())
                }
            </th>

            <th>
                Заводской номер<div class="resizer"></div>
                @if (ViewBag.Filtration == true)
                {
                    TableFilterViewModelBuilder _filterBuilder = new("equipmentTable", "equipmentTableFilter", 8, "Заводской номер");
                    _filterBuilder.Filtering(Model.Select(e => e.FactoryNumber).Distinct()).Sortable();
                    @await Component.InvokeAsync("TableFilterMenu", _filterBuilder.Build())
                }
            </th>

            <th>
                Регистрационный номер<div class="resizer"></div>
                @if (ViewBag.Filtration == true)
                {
                    TableFilterViewModelBuilder _filterBuilder = new("equipmentTable", "equipmentTableFilter", 9, "Регистрационный номер");
                    _filterBuilder.Filtering(Model.Select(e => e.RegistrationNumber).Distinct()).Sortable();
                    @await Component.InvokeAsync("TableFilterMenu", _filterBuilder.Build())
                }
            </th>

            <th>
                Статус<div class="resizer"></div>
                @if (ViewBag.Filtration == true)
                {
                    TableFilterViewModelBuilder _filterBuilder = new("equipmentTable", "equipmentTableFilter", 10, "Статус");
                    _filterBuilder.Filtering(Model.Select(e => e.Status).Distinct()).Sortable();
                    @await Component.InvokeAsync("TableFilterMenu", _filterBuilder.Build())
                }
            </th>

            <th>
                Описание<div class="resizer"></div>
            </th>

            @if (ViewBag.LastEvents != null)
            {
                <th>
                    С момента последнего изменения <div class="resizer"></div>
                </th>
            }

            <th></th>

            @if (ViewBag.EquipmentEdit != null)
            {
                if (ViewBag.EquipmentEdit)
                {
                    <th></th>
                }
            }
        </tr>
	</thead>
	<tbody class="table w-100 table-group-divider">
		@foreach (var item in Model)
		{
			<tr class="d-table-row">
				<td class="border border-1">
					<input class="form-check-input" type="checkbox" id="checkbox_@item.Id" value="@item.Id" aria-label="...">
				</td>
				<td class="border border-1">@item.Id</td>
				<td class="border border-1">@item.Type</td>
				<td class="border border-1">@item.Name</td>
				<td class="border border-1">@item.Manufacturer</td>
				<td class="border border-1">@item.Units</td>
				<td class="border border-1">@item.Limit</td>
				<td class="border border-1">@item.AccuracyClass</td>
				<td class="border border-1">@item.FactoryNumber</td>
				<td class="border border-1">@item.RegistrationNumber</td>
				<td class="border border-1">@item.Status</td>
				<td class="border border-1">@item.Description</td>
				@if(ViewBag.LastEvents != null)
				{
					<td class="border border-1">@Service.ElapsedTimeFormatter.FormatTimeAgo(ViewBag.LastEvents[item.Id].DateTime)</td>
				}
				<td class="border border-1">
					<form asp-controller="Archive" asp-action="History" method="get">
						<input type="hidden" name="storableObjectId" value="@item.Id" />
						<button type="submit" class="btn btn-primary">История</button>
					</form>
				</td>
				@if (ViewBag.EquipmentEdit != null)
				{
					if (ViewBag.EquipmentEdit)
					{
						<td class="border border-1">
							<form asp-controller="StorableObject" asp-action="EditEquipment" method="get">
								<input type="hidden" name="objectId" value="@item.Id" />
								<input type="hidden" name="locationId" value="@(ViewBag.LocationId)" />
								<button type="submit" class="btn btn-warning">Изменить</button>
							</form>
						</td>
					}
				}
			</tr>
		}
	</tbody>
</table>

<script>
	window.addEventListener('load', function () {
        equipmentTableFilter.build();
	});

	makeResizable(document.querySelector('table#equipmentTable'));
</script>