@using Model
@using Model.Enum
@model IEnumerable<IStorableObject>

<div class="form-check form-check-inline">
	<input class="form-check-input" type="radio" name="inlineRadioOptions" id="both" value="both" onclick="setDisplayNone(document.querySelector('div#equipmentTableContainer') , false); setDisplayNone(document.querySelector('div#materialTableContainer') , false);" checked>
	<label class="form-check-label" for="both">Все таблицы</label>
</div>
<div class="form-check form-check-inline">
	<input class="form-check-input" type="radio" name="inlineRadioOptions" id="equipment" value="equipment" onclick="setOnlyOneElementVisible(document.querySelector('div#equipmentTableContainer') , document.querySelectorAll('div.tableContainer'))">
	<label class="form-check-label" for="equipment">Оборудование</label>
</div>
<div class="form-check form-check-inline">
	<input class="form-check-input" type="radio" name="inlineRadioOptions" id="material" value="material" onclick="setOnlyOneElementVisible(document.querySelector('div#materialTableContainer') , document.querySelectorAll('div.tableContainer'))">
	<label class="form-check-label" for="material">Материалы</label>
</div>

<div class="fs-3 m-3">
	Общее количество найденных позиций = <span id="storableObjects_visibleRowsCount" class="fs-3"></span>
</div>

<div id="storableObjectsContainer">
	@{
		var splitedList = Model.GroupByType();

		// Пытаемся получить список для оборудования
		IEnumerable<Equipment> equipmentList;
		if (!splitedList.TryGetValue(StorableObjectType.Equipment, out var equipmentItems))
		{
			equipmentList = Enumerable.Empty<Equipment>(); // Пустой список, если ключ не найден
		}
		else
		{
			equipmentList = equipmentItems.Cast<Equipment>();
		}

		// Пытаемся получить список для материалов
		IEnumerable<MaterialPiece> materialList;
		if (!splitedList.TryGetValue(StorableObjectType.Material, out var materialItems))
		{
			materialList = Enumerable.Empty<MaterialPiece>(); // Пустой список, если ключ не найден
		}
		else
		{
			materialList = materialItems.Cast<MaterialPiece>();
		}

		<div id="equipmentTableContainer" class="tableContainer">
			@await Html.PartialAsync("EquipmentTable", equipmentList)
		</div>
		<div id="materialTableContainer" class="tableContainer">
			@await Html.PartialAsync("MaterialTable", materialList)
		</div>
	}
</div>

<script>
	function calculateSum() {
		const span1 = document.getElementById('equipmentTable_visibleRowsCount').textContent;
		const span2 = document.getElementById('materialTable_visibleRowsCount').textContent;
		const sum = Number(span1) + Number(span2);
		document.getElementById('storableObjects_visibleRowsCount').textContent = sum;
	}

	const observerConfig = { childList: true, subtree: true, characterData: true };

	function observeChanges(spanId) {
		const span = document.getElementById(spanId);
		const observer = new MutationObserver(() => {
			calculateSum();
		});
		observer.observe(span, observerConfig);
	}

	observeChanges('equipmentTable_visibleRowsCount');
	observeChanges('materialTable_visibleRowsCount');
</script>
