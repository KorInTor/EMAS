@using Model.Event
@using Service
@using System.Diagnostics
@model IEnumerable<StorableObjectEvent>

<script src="~/js/tableResizer.js"></script>

@if(ViewBag.Filtration == true)
{
	<script src="~/js/dynamicTableFilter.js"></script>
	<script>
		const eventTableFilter = new TableFilter("eventTable");
	</script>
	<div class="fs-3 m-3">
		Количество найденных событий = <span id="eventTable_visibleRowsCount" class="fs-3"></span>
	</div>
}

<table id="eventTable" class="table table-striped table-bordered">
	<thead>
		<tr>
			<th><input class="form-check-input" type="checkbox" id="checkAll" onchange="setCheckAllVisibleChildElements(this.parentElement.parentElement.parentElement.parentElement.querySelector('tbody'), this.checked)"></th>
			<th>
				Id<div class="resizer"></div> 
				@if(ViewBag.Filtration == true)
				{
					TableFilterViewModelBuilder _filterBuilder1 = new("eventTable", "eventTableFilter", 1, "Id");
					_filterBuilder1.Filtering(Model.Select(e => e.Id.ToString()).Distinct()).NumericRange().Sortable();
					@await Component.InvokeAsync("TableFilterMenu", _filterBuilder1.Build())
				}
			</th>
			<th>
				Тип<div class="resizer"></div>
				@if(ViewBag.Filtration == true)
				{
					TableFilterViewModelBuilder _filterBuilder = new("eventTable", "eventTableFilter", 2, "Тип");
					_filterBuilder.Filtering(Model.Select(e => EventStringBuilder.EventTypeToString(e.EventType)).Distinct()).Sortable();
					@await Component.InvokeAsync("TableFilterMenu", _filterBuilder.Build())
				}
				
			</th>
			<th>
				Дата и Время<div class="resizer"></div>
				@if (ViewBag.Filtration == true)
				{
					TableFilterViewModelBuilder _filterBuilder = new("eventTable", "eventTableFilter", 3, "Дата и время");
					_filterBuilder.Sortable().DateRange();
					@await Component.InvokeAsync("TableFilterMenu", _filterBuilder.Build())
				}
				
			</th>
			<th>
				Ответственный
				@if (ViewBag.Filtration == true)
				{
					TableFilterViewModelBuilder _filterBuilder = new("eventTable", "eventTableFilter", 4, "Сотрудник");
					_filterBuilder.Filtering(ViewBag.DistinctEmployeNames).Sortable();
					@await Component.InvokeAsync("TableFilterMenu", _filterBuilder.Build())
				}
				
			</th>
			<th>
				Дополнительная информация<div class="resizer"></div>
			</th>
			<th>
				
			</th>
		</tr>
	</thead>
	<tbody class="table w-100 table-group-divider">
		@foreach (var item in Model)
		{
			<tr class="d-table-row">
				<td class="border border-1">
					<input class="form-check-input" type="checkbox" id="checkbox_@item.Id" value="@item.Id" aria-label="...">
				</td>
				<td class="border border-1">@item.Id</td>
				<td class="border border-1">@EventStringBuilder.EventTypeToString(item.EventType)</td>
				<td class="border border-1">@item.DateTime.ToString()</td>
				<td class="border border-1">@ViewBag.EmployeesNames[item.EmployeeId]</td>
				<td class="border border-1">@await Html.PartialAsync("EventAdditionalInfo", item)</td>
				<td class="border border-1 p-0 m-0">
					<div class="mx-auto">
						<form asp-controller="Archive" asp-action="ObjectsInEvent" method="get">
							<input type="hidden" name="eventId" value="@item.Id" />
							<input type="submit" class="btn btn-primary" value="Объекты в событии"/>
						</form>
					</div>
				</td>
			</tr>
		}
	</tbody>
</table>

<script>
	
	window.addEventListener('load', function () {
		eventTableFilter.build();
	});

	makeResizable(document.querySelector('table#eventTable'));
</script>